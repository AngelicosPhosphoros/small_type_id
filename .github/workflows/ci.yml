name: tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-fmt:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - name: Disable autocrlf on Windows
        # This interferes with stdout/stderr etalon files.
        run: git config --global core.autocrlf false
        if: ${{ matrix.os == 'windows-latest' }}
      - uses: actions/checkout@v4
      - run: cargo fmt --check
  run-clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      # Pin clippy version to avoid introducing new CI failures.
      - name: Select Rust version
        run: rustup override set 1.87.0
      - name: Install clippy
        run: rustup component add clippy
      - name: Clippy
        run: cargo clippy -- -D clippy::pedantic
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        rust:
          - stable
          - beta
          - nightly
          - 1.87.0  # MSRV
    steps:
      - name: Disable autocrlf on Windows
        # This interferes with stdout/stderr etalon files.
        run: git config --global core.autocrlf false
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Update Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/checkout@v4
      - name: Select Rust version
        run: rustup override set ${{ matrix.rust }}
      - name: Install rust-src on nightly
        run: rustup component add rust-src
        if: ${{ matrix.rust == 'nightly' }}
      - name: Install llvm-tools on nightly
        run: rustup component add llvm-tools
        if: ${{ matrix.rust == 'nightly' && matrix.os == 'macos-latest' }}
      - name: Pin dependency versions
        run: cargo +nightly -Z minimal-versions generate-lockfile
      - name: Build
        run: cargo build --verbose --workspace --exclude benches
      - name: Run tests
        run: cargo test --workspace --exclude benches
      - name: Run tests with names
        run: cargo test --workspace --exclude benches --features=debug_type_name
      - name: Run tests without checks
        run: cargo test --workspace --exclude benches --features=unsafe_remove_duplicate_checks
      - name: Run tests without registration
        run: cargo test --workspace --exclude benches --features=unsafe_dont_register_types
      - name: Run tests combined
        run: cargo test --workspace --exclude benches --features=debug_type_name,unsafe_remove_duplicate_checks
      - name: UI tests
        run: python extra_tests/cmp_output.py
        if: ${{ matrix.rust != 'nightly' || matrix.os == 'macos-latest' }}
      - name: UI tests with Address-Sanitizer
        run: python extra_tests/cmp_output.py --use-asan
        if: ${{ matrix.rust == 'nightly' && matrix.os != 'macos-latest' }}
  test-musl:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare podman image
        run: buildah build -f ./.github/musl_dockerfile --tag musl_rust
      - name: Run build.
        run: podman run -t -w /small_type_id musl_rust cargo build --verbose --workspace --exclude benches
      - name: Rus tests
        run: podman run -t -w /small_type_id musl_rust cargo test --workspace --exclude benches
      - name: Run tests with names
        run: podman run -t -w /small_type_id musl_rust cargo test --workspace --exclude benches --features=debug_type_name
      - name: Run tests without checks
        run: podman run -t -w /small_type_id musl_rust cargo test --workspace --exclude benches --features=unsafe_remove_duplicate_checks
      - name: Run tests without registration
        run: podman run -t -w /small_type_id musl_rust cargo test --workspace --exclude benches --features=unsafe_dont_register_types
      - name: Run tests combined
        run: podman run -t -w /small_type_id musl_rust cargo test --workspace --exclude benches --features=debug_type_name,unsafe_remove_duplicate_checks
      - name: UI tests
        run: podman run -t -w /small_type_id/extra_tests musl_rust python cmp_output.py
  # This tests pure Rust libc implementation
  test-eyra-libc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup override set nightly-2025-04-29
      - run: |
          cat <<EOF >build.rs
          fn main(){ println!("cargo:rustc-link-arg=-nostartfiles"); }
          EOF
        working-directory: small_type_id
      - run: echo "[dev-dependencies]" >> Cargo.toml
        working-directory: small_type_id
      - run: echo 'std = {version = "0.21.0", package = "eyra"}' >> Cargo.toml
        working-directory: small_type_id
      - run: cargo test
        working-directory: small_type_id
      - run: cargo test --features=debug_type_name
        working-directory: small_type_id
      - run: cargo test --features=unsafe_remove_duplicate_checks
        working-directory: small_type_id
      - run: cargo test --features=debug_type_name,unsafe_remove_duplicate_checks
        working-directory: small_type_id
      - name: Run tests without registration
        run: cargo test --features=unsafe_dont_register_types
        working-directory: small_type_id
  miri-checks:
    # No need to run on others because platform specific unsafe is not really testable
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Pin MIRI version to avoid introducing new CI failures.
      - name: Select Rust version
        run: rustup override set nightly-2025-06-11
      - run: rustup component add miri
      - name: Tests on MIRI
        run: cargo miri test --verbose --workspace --exclude benches
      - run: cargo miri test --verbose --workspace --exclude benches --features=debug_type_name
  check-hex-formatting-using-address-sanitizer:
    # No need to run on others because code it crossplatform
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: '-Zsanitizer=address'
    steps:
      - uses: actions/checkout@v4
      - run: rustup override set nightly
      - run: rustup component add rust-src
      - name: Compile formatting checking using sanitizer
        run: cargo build -Zbuild-std --release --bin check_every_u32_hex
      - name: Test formatting of every possible u32
        run: ./target/release/check_every_u32_hex
  publish-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Derive crate
        working-directory: small_type_id_proc_macro
        run: cargo publish --dry-run
      - name: Main crate
        continue-on-error: true
        working-directory: small_type_id
        run: cargo publish --dry-run

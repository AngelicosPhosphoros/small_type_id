name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-fmt:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - name: Disable autocrlf on Windows
        # This interferes with stdout/stderr etalon files.
        run: git config --global core.autocrlf false
        if: ${{ matrix.os == 'windows-latest' }}
      - uses: actions/checkout@v4
      - run: cargo fmt --check
  run-clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      # Pin clippy version to avoid introducing new CI failures.
      - name: Select Rust version
        run: rustup override set 1.87.0
      - name: Clippy
        # Need to enable them later.
        #run: cargo clippy -- -D clippy::pedantic
        run: echo "Clippy step are disabled for now"
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        rust:
          - stable
          - beta
          - nightly
          - 1.87.0  # MSRV
    steps:
      - name: Disable autocrlf on Windows
        # This interferes with stdout/stderr etalon files.
        run: git config --global core.autocrlf false
        if: ${{ matrix.os == 'windows-latest' }}
      - uses: actions/checkout@v4
      - name: Select Rust version
        run: rustup override set ${{ matrix.rust }}
      - name: Pin dependency versions
        run: cargo +nightly -Z minimal-versions generate-lockfile
      - name: Build
        run: cargo build --verbose --workspace --exclude benches
      - name: Run tests
        run: cargo test --verbose --workspace --exclude benches
      - name: Run tests
        run: cargo test --verbose --workspace --exclude benches --features=debug_type_name
      - name: Run tests
        run: cargo test --verbose --workspace --exclude benches --features=unsafe_remove_duplicate_checks
      - name: Run tests
        run: cargo test --verbose --workspace --exclude benches --features=debug_type_name,unsafe_remove_duplicate_checks
      - name: Autodetect tests
        run: echo "Staring autodetect tests"
      - run: cargo build --verbose --workspace --bin duplicate_type_ids_handling
      - run: python extra_tests/cmp_output.py --exp_code 2 --exp_stderr extra_tests/etalons/auto_no_names.txt target/debug/duplicate_type_ids_handling
      - run: cargo build --verbose --workspace --bin duplicate_type_ids_handling --features=unsafe_remove_duplicate_checks
      - run: python extra_tests/cmp_output.py --exp_code 0 
          --exp_stderr extra_tests/etalons/m_stderr.txt 
          --exp_stdout extra_tests/etalons/m_stdout_no_names.txt 
          target/debug/duplicate_type_ids_handling
      - run: cargo build --verbose --workspace --bin duplicate_type_ids_handling --features=debug_type_name
      - run: python extra_tests/cmp_output.py --exp_code 2 
          --exp_stderr extra_tests/etalons/auto_with_names.txt 
          target/debug/duplicate_type_ids_handling
      - run: cargo build --verbose --workspace --bin duplicate_type_ids_handling
             --features=debug_type_name,unsafe_remove_duplicate_checks
      - run: python extra_tests/cmp_output.py --exp_code 0 
          --exp_stderr extra_tests/etalons/m_stderr.txt 
          --exp_stdout extra_tests/etalons/m_stdout_with_names.txt 
          target/debug/duplicate_type_ids_handling
  miri-checks:
    # No need to run on others because platform specific unsafe is not really testable
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Pin MIRI version to avoid introducing new CI failures.
      - name: Select Rust version
        run: rustup override set nightly-2025-06-11
      - run: rustup component add miri
      - name: Tests on MIRI
        run: cargo miri test --verbose --workspace --exclude benches
      - run: cargo miri test --verbose --workspace --exclude benches --features=debug_type_name
  check-hex-formatting-using-address-sanitizer:
    # No need to run on others because code it crossplatform
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: '-Zsanitizer=address'
    steps:
      - uses: actions/checkout@v4
      - run: rustup override set nightly
      - run: rustup component add rust-src
      - name: Compile formatting checking using sanitizer
        run: cargo build -Zbuild-std --release --bin check_every_u32_hex
      - name: Test formatting of every possible u32
        run: ./target/release/check_every_u32_hex
  publish-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Derive crate
        working-directory: small_type_id_proc_macro
        run: cargo publish --dry-run
      # - name: Main crate
      #   working-directory: small_type_id
      #   run: cargo publish --dry-run
